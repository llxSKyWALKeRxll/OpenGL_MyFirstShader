#version 330

in vec4 vCol;
in vec2 texPos;
in vec3 normal;
in vec3 fragPos;
in vec4 directionalLightSpacePos;

out vec4 colour;

const int MAX_POINT_LIGHTS = 3;
const int MAX_SPOT_LIGHTS = 3;

struct Light
{
	vec3 colour;
	float ambient_intensity;
	float diffuse_intensity;
};

struct directionalLight
{
	Light base;
	vec3 direction;
};

struct pointLight
{
	Light base;
	vec3 position;
	float constant;
	float linear;
	float exponent;
};

struct spotLight
{
	pointLight base;
	vec3 direction;
	float edge;
};

struct omniShadowMap
{
	samplerCube shadowMap;
	float farPlane;
};

struct Material
{
	float specular_intensity;
	float shininess;
};

uniform int pointLightCounter;
uniform int spotLightCounter;

uniform directionalLight directional_light;
uniform pointLight point_lights[MAX_POINT_LIGHTS];
uniform spotLight spot_lights[MAX_SPOT_LIGHTS];

uniform sampler2D the_texture;
uniform sampler2D directionalShadowMap;
uniform omniShadowMap omniShadowMaps[MAX_POINT_LIGHTS + MAX_SPOT_LIGHTS];

uniform Material material;

uniform vec3 eyePosition;

vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float calcDirectionalShadowFactor(directionalLight light)
{
	vec3 projCoords = directionalLightSpacePos.xyz / directionalLightSpacePos.w;
	projCoords = (projCoords * 0.5) + 0.5;
	
	float current = projCoords.z;
	
	vec3 Normal = normalize(normal);
	vec3 lightDir = normalize(light.direction);
	
	float bias = max(0.05 * (1 - dot(Normal, lightDir)), 0.005);
	
	float shadow = 0.0;
	
	vec2 texelSize = 1.0 / textureSize(directionalShadowMap, 0);
	
	for(int x = -1; x <= 1; x++)
	{
		for(int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(directionalShadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += current - bias > pcfDepth ? 1.0: 0.0;
		}
	}
	
	shadow /= 9.0;
	
	if (projCoords.z > 1.0)
	{
		shadow = 0.0;
	}
	
	return shadow;
}

float calcOmniShadowFactor(pointLight light, int shadowIndex)
{
	vec3 fragToLight = fragPos - light.position;
	float current = length(fragToLight);
	
	float shadow = 0.0;
	float bias = 0.05;
	int samples = 20;
	
	float viewDistance = length(eyePosition - fragPos);
	float diskRadius = (1.0 + (viewDistance / omniShadowMaps[shadowIndex].farPlane)) / 25.0;
	
	for(int i = 0; i < samples; i++)
	{
		float closest = texture(omniShadowMaps[shadowIndex].shadowMap, fragToLight + sampleOffsetDirections[i] * diskRadius).r;
		closest *= omniShadowMaps[shadowIndex].farPlane;
		
		if (current - bias > closest)
		{
			shadow += 1.0;
		}
	}
	
	shadow /= float(samples);
	
	return shadow;
}

vec4 calcLightByDirection(Light light, vec3 direction, float shadowFactor)
{
	vec4 ambient_colour = vec4(light.colour, 1.0f) * light.ambient_intensity;

	float diffuse_factor = max(dot(normalize(normal), normalize(direction)), 0.0f);
	vec4 diffuse_colour = vec4(light.colour, 1.0f) * light.diffuse_intensity * diffuse_factor;

	vec4 specular_colour = vec4(0, 0, 0, 0);

	if (diffuse_factor > 0.0f)
	{
		vec3 fragToEye = normalize(eyePosition - fragPos);
		vec3 reflectedVertex = normalize(reflect(direction, normalize(normal)));

		float specularFactor = dot(fragToEye, reflectedVertex);
		if (specularFactor > 0.0f)
		{
			specularFactor = pow(specularFactor, material.shininess);
			specular_colour = vec4(light.colour * material.specular_intensity * specularFactor, 1.0f);
		}
	}

	return (ambient_colour + (1.0 - shadowFactor) * (diffuse_colour + specular_colour));
}

vec4 calcDirectionalLight()
{
	float shadowFactor = calcDirectionalShadowFactor(directional_light);
	return calcLightByDirection(directional_light.base, directional_light.direction, shadowFactor);
}

vec4 calcPointLight(pointLight pLight, int shadowIndex)
{
	vec3 direction = fragPos - pLight.position;
	float distance = length(direction);
	direction = normalize(direction);
	
	float shadowFactor = calcOmniShadowFactor(pLight, shadowIndex);
		
	vec4 colour = calcLightByDirection(pLight.base, direction, shadowFactor);
	float attenuation = pLight.exponent * distance * distance +
						pLight.linear * distance +
						pLight.constant;
							
	return (colour / attenuation);
}

vec4 calcSpotLight(spotLight sLight, int shadowIndex)
{
	vec3 ray_direction = normalize(fragPos - sLight.base.position);
	float spotLightFactor = dot(ray_direction, sLight.direction);
	
	if (spotLightFactor > sLight.edge)
	{
		vec4 colour = calcPointLight(sLight.base, shadowIndex);
		return colour * (1.0f - (1.0f - spotLightFactor) * (1.0f / (1.0f - sLight.edge)));
	}
	else
	{
		return vec4(0, 0, 0, 0);
	}
}

vec4 calcPointLights()
{
	vec4 total_colour = vec4(0, 0, 0, 0);
	for(int i = 0; i < pointLightCounter; i++)
	{						
		total_colour += calcPointLight(point_lights[i], i); 
	}
	return total_colour;
}

vec4 calcSpotLights()
{
	vec4 total_colour = vec4(0, 0, 0, 0);
	for(int i = 0; i < spotLightCounter; i++)
	{						
		total_colour += calcSpotLight(spot_lights[i], i + pointLightCounter); 
	}
	return total_colour;
}

void main()
{
	vec4 final_colour = calcDirectionalLight();
	
	final_colour += calcPointLights();
	
	final_colour += calcSpotLights();
	
	colour = texture(the_texture, texPos) * final_colour;
}	